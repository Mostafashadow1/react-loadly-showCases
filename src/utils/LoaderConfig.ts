import {
  BarsLoader,
  DotsLoader,
  GridLoader,
  LogoSpinLoader,
  PulseLoader,
  RingLoader,
  SpinLoader,
  TypingLoader,
  WaveLoader,
  BlobLoader,
  FlowLoader,
  RotateLoader,
  ElementLoader,
  BounceLoader,
  SkeletonLoader,
} from "react-loadly";
import {
  commonProps,
  type ILoaderConfig,
  type LoaderKind,
} from "@/types/ILoaderConfig";

export const LOADER_CONFIGS: { [K in LoaderKind]: ILoaderConfig<K> } = {
  spin: {
    component: SpinLoader,
    title: "Spin Loader",
    interface: "IBaseLoaderProps",
    commonProps: commonProps,
    uniqueProps: [],
  },
  pulse: {
    component: PulseLoader,
    title: "Pulse Loader",
    interface: "IGeometricLoaderProps",
    commonProps: commonProps,
    uniqueProps: ["count", "borderWidth"],
  },
  wave: {
    component: WaveLoader,
    title: "Wave Loader",
    interface: "IFluidLoaderProps",
    commonProps: commonProps,
    uniqueProps: ["fluidity", "amplitude"],
  },
  grid: {
    component: GridLoader,
    title: "Grid Loader",
    interface: "IGeometricLoaderProps",
    commonProps: commonProps,
    uniqueProps: ["count", "borderWidth"],
  },
  typing: {
    component: TypingLoader,
    title: "Typing Loader",
    interface: "ITextLoaderProps",
    commonProps: commonProps,
    uniqueProps: ["loop", "charDelay", "fontWeight", "fontFamily"],
  },
  logo: {
    component: LogoSpinLoader,
    title: "Logo Loader",
    interface: "ILogoLoaderProps",
    commonProps: commonProps,
    uniqueProps: ["src", "alt", "animationType", "glowIntensity"],
  },
  bars: {
    component: BarsLoader,
    title: "Bars Loader",
    interface: "IGeometricLoaderProps",
    commonProps: commonProps,
    uniqueProps: ["count", "borderWidth"],
  },
  dots: {
    component: DotsLoader,
    title: "Dots Loader",
    interface: "IGeometricLoaderProps",
    commonProps: commonProps,
    uniqueProps: ["count", "borderWidth"],
  },
  blob: {
    component: BlobLoader,
    title: "Blob Loader",
    interface: "IFluidLoaderProps",
    commonProps: commonProps,
    uniqueProps: ["fluidity", "amplitude"],
  },
  ring: {
    component: RingLoader,
    title: "Ring Loader",
    interface: "IGeometricLoaderProps",
    commonProps: commonProps,
    uniqueProps: ["borderWidth", "count"],
  },
  flow: {
    component: FlowLoader,
    title: "Flow Loader",
    interface: "IFluidLoaderProps",
    commonProps: commonProps,
    uniqueProps: ["fluidity", "amplitude"],
  },
  rotate: {
    component: RotateLoader,
    title: "Rotate Loader",
    interface: "IGeometricLoaderProps",
    commonProps: commonProps,
    uniqueProps: ["count", "borderWidth"],
  },
  element: {
    component: ElementLoader,
    title: "Element Loader",
    interface: "IElementLoaderProps",
    commonProps: commonProps,
    uniqueProps: ["animationType", "children", "glowIntensity"],
  },
  bounce: {
    component: BounceLoader,
    title: "Bounce Loader",
    interface: "IGeometricLoaderProps",
    commonProps: commonProps,
    uniqueProps: ["count", "borderWidth"],
  },

  skeleton: {
    component: SkeletonLoader,
    title: "Skeleton Loader",
    interface: "ISkeletonLoaderProps",
    commonProps: commonProps,
    uniqueProps: [
      "variant",
      "shimmer",
      "shimmerColor",
      "highlightColor",
      "spacing",
      "borderRadius",
      "lines",
      "waveDirection",
      "waveWidth",
      "aria-label",
    ],
  },
};
